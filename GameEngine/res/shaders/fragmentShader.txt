#version 130

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in float distance;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform int changeColor;
uniform vec3 color;
uniform int typeOfView;

void main(void){
	if(typeOfView==0){
		vec3 unitNormal = normalize(surfaceNormal);
		vec3 unitLightVector = normalize(toLightVector);
		
		float nDot1 = dot(unitNormal,unitLightVector);
		float brightness = max(nDot1,0.2);
		vec3 diffuse  = brightness * lightColor;
	
		out_Color = vec4(diffuse,1.0) * texture(textureSampler, pass_textureCoords);
		if(changeColor==1){
			out_Color = vec4(color,1.0);
		};
	}
	else if(typeOfView==1){
		out_Color = vec4(distance,distance,distance,1);
	}
	else if(typeOfView==2){
		out_Color = abs(vec4(surfaceNormal.x,surfaceNormal.y,surfaceNormal.z,1));
	}
}